alias Tuple<a, b> { a : a, b : b }
type Tuple2<a, b> {} { a : a, b : b }
alias Tuple3<a> { a : a, b : a }

alias SliceA<i, t> { ptr : $t, len : i }

type Array<i, t> {
  hide ptr

  [i] 0 <= i && i < len
  -> ptr[i]

  [s = 0 :: e = len] 0 <= s && s <= e && e <= len
  -> { ref(ptr[s]), e - s } to Slice

} { ptr : $t, len : i, cap : i }

type Slice<i, t> {
  hide ptr

  [i] 0 <= i && i < len
  -> ptr[i]

  [s = 0 :: e = len] 0 <= s && s <= e && e <= len
  -> { ref(ptr[s]), e - s } to Slice
} { ptr : $t, len : i }

type RenameThing {
  hide a
  c -> a
} { a : Bool, b : Bool}

func () ret
main () ret {
  {
    let mut tup : Tuple
    {
      tup.b = 42
      tup.a = 2
    }
    tup.a = 4
    tup.b = 3

    let mut tup2 : Tuple2<I64, Bool>
    tup2.a = 42
    tup2.b = true

    let tup3 : Tuple3<ret>
    let mut blub = tup == tup3

    ret = tup.b * 10 + tup.a
  }
  // ret is here 34

  {
    let rt : RenameThing
    let mut blub = true

    blub = rt.b
    blub = rt.c
    // blub = rt.a // will fail typechecking

    if !blub {
      ret = ret + 100
    }
  }
  // ret is here 134

  {
    let mut ary : Array<ret, Bool>
    ary.cap = 10
    ary.len = 10
    ret = ret + ary[::][::].len
  }
  // ret is here 144
}
